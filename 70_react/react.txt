1. React
: 페이스북에서 만든 Javascript 기반의 프론트엔드 라이브러리

2. React 특징
1) '컴포넌트'라고 불리는 작은 코드의 조각을 이용해서 UI를 구성함
2) Virtual DOM(가상 문서객체모델) 사용
: 바뀐 데이터를 일단 그려놓고 비교를 한 후 바뀐 부분만 리렌더링함
  DOM의 변화를 최소화시켜서 성능을 높여줌
3) JSX(Javascript XML): HTML 문법과 유사하게 작성하는 Javascript
- const element = (<div>Hello, React</div>);
4) 상태 관리, 라우팅, API 통신을 위한 추가 라이브러리 사용 가능

3. React를 배우기 전에 알아야 할 내용 (react.js)
1) spread 연산자
2) 비구조화 할당
3) 불변성 유지
4) import, export

4. React 작업 환경 준비
1) Node.js
2) Yarn : 개선된 버전의 npm
3) npx create-react-app 71_basic (React 앱을 만들어주는 도구)

5. JSX 규칙 6가지 (./71_basic/src/App.js)

6. 리액트에서 다루는 데이터
1) props (properties)
- 부모 컴포넌트가 자식 컴포넌트에게 주는 값
- 자식 컴포는트는 props를 받아오기만 해야 함(read-only)

2) state: 컴포넌트 내의 동적인 값
- 컴포넌트 내부에서 선언해서 내부에서 값 변경 가능
- 부모 컴포넌트의 state를 자식 컴포넌트에 props로 전달 가능
- 16.8부터 Hook이라는 기능이 도입되면서 함수형 컴포넌트에서도 state를 쓸 수 있게 됨 (원래는 클래스형)

7. 조건부 렌더링
1) 조건이 참 또는 거짓인지에 따라 다른 결과물을 렌더링하는 경우 -> 삼항연산자
2) 조건이 참인 경우에만 렌더링하는 경우 -> &&

8. Imput 필드 상태 관리
- useState
- input onChange -> 이벤트 핸들러 함수 (e.target)
- [name]: value (계산된 속성명 사용)

* 컴포넌트가 업데이트가 되는 경우
1) 부모 컴포넌트에서 넘겨주는 props가 바뀔 경우
2) 컴포넌트 자신이 갖고 있는 state가 업데이트 될 때
3) 부모 컴포넌트가 리렌더링 될 때

9. useRef()
1) DOM 객체에 직접 접근할 때
2) 리렌더링 없이 변경할 수 있는 변수를 만들고자 할 때

10. 배열 렌더링
1) 배열에 데이터 추가
- spread 연산자 사용
- concat() 함수 사용
2) 삭제
- 배열명.filter
3) 수정하기
- 배열명.map

11. useEffect
- 마운트, 언마운트, 컴포넌트가 업데이트 될 때 특정 작업을 수행하는 경우
- 클래스 컴포넌트의 생명주기 메소드를 대체함
- useEffect(() => {마운트 또는 업데이트 직후; return () => {언마운트 또는 업데이트 직전}}, [music])

12. useMemo: 연산한 값을 재사용(memoized value를 )
- 값이 변경되지 않은 경우 이전 값을 재사용
- 값이 변경된 경우에만 연산 수행
- 컴포넌트 성능 최적화를 위해 사용


# 두번 렌더링 되는 경우: index.js에서 StrictMode가 개발환경에서만 자동으로 실행시킴(오류 검출)

13. useReducer
- 상태를 업데이트 하는 로직을 컴포넌트에서 분리
- useState: 간단한 데이터 처리
- useReducer: 복잡한 데이터 처리
- function reducer(state, action) { ... }
- const [state, dispatch] = useReducer(reducer, { ... })
- dispatch({ type: "CREATE", ... })

14. Context: 프로젝트 안에서 전역적으로 사용하는 값을 관리
1) createContext()로 Context 생성하기
2) Context.Porvider 컴포넌트에 value값 셋팅하기
3) useContext()로 Context값 불러오기

15. API 연동하기
- npx create-react-app 72_api
- cd 72_api
- yarn add axios (REST 요청 시 Promise기반으로 HTTP Client용 라이브러리)
- yarn global add json-server
- music.json 파일 생성
- json-server --watch music.json --port 5000
- MusicList, Music 컴포넌트를 useReducer로 구현

16. react-async로 요청하기
- yarn add react-async
- MusicList, Music 컴포넌트를 useAsync로 구현

17. 리액트 라우터
- Recat Router: 컴포넌트를 기반을 라우팅을 함
- yarn add react-router-dom
- 